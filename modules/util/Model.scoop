
//-----------------------------------------------------------------------------
// Copyright (c) 2010 Patrick Mueller
// Licensed under the MIT license: 
// http://www.opensource.org/licenses/mit-license.php
//-----------------------------------------------------------------------------

require ./Callbacks

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
class Model(attributes) < Callbacks
    this._attributes = {}
    
    if (attributes) {
        for (var key in attributes) {
            this.set(key, attributes[key])
        }
    }

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
method set(attribute, value)

    if (arguments.length == 1) {
        if (typeof(attribute) != "object") {
            throw new Error("invalid attributes parameter")
        }
        
        for (var key in attribute) {
            this.set(key, attribute[key])
        }
        return
    }
    
    var oldValue = this.get(attribute)
    
    if (value == oldValue) return
    
    var eventData = {
        attribute: attribute,
        oldValue:  oldValue,
        newValue:  value
    }

    this.fireCallback("verify:" + attribute, eventData)
    
    if (!eventData.reject) {
        this.fireCallback("verify",          eventData)
    }
    
    if (eventData.reject) {
        this.fireCallback("reject:" + attribute, eventData)
        this.fireCallback("reject",              eventData)
        return
    }
    
    this._attributes[attribute] = value
    
    this.fireCallback("change:" + attribute, eventData)
    this.fireCallback("change",              eventData)

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
method get(attribute)
    return this._attributes[attribute]


