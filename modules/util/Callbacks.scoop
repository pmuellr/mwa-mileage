
//-----------------------------------------------------------------------------
// Copyright (c) 2010 Patrick Mueller
// Licensed under the MIT license: 
// http://www.opensource.org/licenses/mit-license.php
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
class Callbacks

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
method addCallback(callbackName, receiver, func, userData)
    var parms = this.__sanitizeParms(receiver, func, userData)
    
    receiver = parms.receiver
    func     = parms.func
    userData = parms.userData
    
    if (!func) throw new Error("invalid function")
    
    if (!this._callbacks) this._callbacks = {}
    
    var list = this._callbacks[callbackName]
    if (!list) {
        list = this._callbacks[callbackName] = []
    }
    
    list.push({receiver:receiver, func:func, userData:userData})

//-----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
method removeCallback(callbackName, receiver, func)
    var parms = this.__sanitizeParms(receiver, func, userData)
    
    receiver = parms.receiver
    func     = parms.func
    userData = parms.userData
    
    if (!this._callbacks) return
    
    var list = this._callbacks[callbackName]
    if (!list) return
    
    var newList = []
    
    list.forEach(function(item) {
        var copy = true
        if (receiver == item.receiver) {
            if (!func || (func == item.func)) {
                copy = false
            }
        }
        
        if (copy) {
            newList.push(item)
        }
    })
    
    this._callbacks[callbackName] = newList

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
method fireCallback(callbackName, eventData)
    if (!this._callbacks) return

    var list = this._callbacks[callbackName]
    if (!list) return
    
    list.forEach(function(item) {
        eventData.callbackName = callbackName
        item.func.call(item.receiver, eventData, item.userData)
    })


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
method __sanitizeParms(receiver, func, userData)

    if (typeof(receiver) != "object") {
        userData = func
        func     = receiver
        receiver = this
    }
    
    if (typeof(func) == "string") func = receiver[func]
    if (func === undefined) func = null
    
    if (typeof(receiver) != "object") throw new Error("invalid receiver")
    if (func && (typeof(func) != "function")) throw new Error("invalid function")

    return {receiver:receiver, func:func, userData:userData}