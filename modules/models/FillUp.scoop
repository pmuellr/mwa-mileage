
//-----------------------------------------------------------------------------
// Copyright (c) 2010 Patrick Mueller
// Licensed under the MIT license: 
// http://www.opensource.org/licenses/mit-license.php
//-----------------------------------------------------------------------------

require backbone as Backbone
require underscore as _

//-----------------------------------------------------------------------------
static 
    var DefaultAttributes = 
        { distance:   300
        , fuel:       10
        , date:       getDate()
        }

//-----------------------------------------------------------------------------
class FillUp(attributes) < Backbone.Model
    this.defaults = DefaultAttributes
    
    super(attributes)
    
    this.updateMileage()
    
    var self = this
    this.bind("change", function() { self.updateMileage() })

//-----------------------------------------------------------------------------
method validate(attrs)
    var error
    
    if (attrs.distance) {
        if (typeof attrs.distance != "number") {
            if (!attrs.distance.match(/\d*(\.\d*)?/)) {
                error = "distance must be a number, was '" + attrs.distance + "'"
            }
        }
    }

    if (attrs.fuel) {
        if (typeof attrs.fuel != "number") {
            if (!attrs.fuel.match(/\d*(\.\d*)?/)) {
                error = "fuel must be a number, was '" + attrs.fuel + "'"
            }
        }
    }

    if (attrs.date) {
        if (!attrs.date.match(/\d{4}-\d{2}-\d{2}/)) {
            error = "date must be in the form YYYY-MM-DD, was '" + attrs.date + "'"
        }
    }
    
    if (error) {
        alert(error)
        return error
    }

//-----------------------------------------------------------------------------
getter distance
    return this.get("distance")
    
setter distance(value)
    if (typeof value != "number") {
        var oldValue = value
        value = parseFloat(value)
        if (isNaN(value)) value = oldValue // let validate catch the error
    }
    
    this.set({distance: value})
    
//-----------------------------------------------------------------------------
getter fuel
    return this.get("fuel")
    
setter fuel(value)
    if (typeof value != "number") {
        var oldValue = value
        value = parseFloat(value)
        if (isNaN(value)) value = oldValue // let validate catch the error
    }

    this.set({fuel: value})
    
//-----------------------------------------------------------------------------
getter date
    return this.get("date")
    
setter date(value)
    this.set({date: value})
    
//-----------------------------------------------------------------------------
getter mileage
    return this.get("mileage")

//-----------------------------------------------------------------------------
method updateMileage()
    var mileage = calculateMileage(this.distance, this.fuel)
    if (mileage != this._mileage) {
        this._mileage = mileage
        this.set({"mileage": mileage})
    }

//-----------------------------------------------------------------------------
function calculateMileage(distance, fuel)
    if ((0 == fuel) || (0 == distance)) return 0
    return distance / fuel
    
//-----------------------------------------------------------------------------
function getDate
    var date = new Date()
    
    return "" + 
        date.getFullYear() + "-" + 
        leftFill(1+date.getMonth(), 2, "0") + "-" + 
        leftFill(date.getDate(), 2, "0")

//-----------------------------------------------------------------------------
function leftFill(string, width, fill)
    string = "" + string
    while (string.length < width) {
        string = fill + string
    }
    return string

    
